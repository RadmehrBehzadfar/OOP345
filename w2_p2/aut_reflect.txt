/*/////////////////////////////////////////////////////////////////////////
Student ID#: 148786221
Email : rbehzadfar@myseneca.ca
Section : NRA
Date : 2024 - 01 - 29

Authenticity Declaration :
I have done all the coding by myself and only copied the code that
my professor provided to complete my workshops and assignments.

/////////////////////////////////////////////////////////////////////////*/

In this workshop, I had an opportunity to use the file input and output library "fstream" that I totally understood the concept of last semester. I used the "getline" function to read the file line by line and save the value to the string type variable. Especially this time, I used the "seekg" function to read the same file twice. This is because if the file was first read to count the total number of lines in the file, the file position indicator would have reached the end of the file. That is why I had to move the file position indicator to the first place to read the same file again. Moreover, I used the newly learned "chrono" library to measure the time it took for my function to be implemented.

	The most interesting thing about this workshop was that it implemented move semantics. A "move()" function is not a function that actually moves a value, unlike its name. It only serves to change to rvalue. Then the value changed to rvalue is moved by the move constructor I implemented. The way to implement move constructor is to use "&&" as a reference. Move semantics, which receives rvalue as a reference, is noticeably faster than copy semantics. This is because the copy constructor maintains the original data and deep copies all of the data one by one. However, the move constructor receives the address value of the original data. As a result, the moving constructor is fast in terms of speed because unlike the copy constructor, it does not reallocate memory.
